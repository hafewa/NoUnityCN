name: Unity 版本更新与自动部署

on:
  schedule:
    - cron: '0 18 * * *'  # 每天18点执行版本更新
  workflow_dispatch:     # 允许手动触发

permissions:
  contents: write
  pull-requests: write

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: main  # 默认从main分支拉取代码

      # 2. 创建版本目录
      - name: 创建版本目录
        run: |
          mkdir -p public/version

      # 3. 下载版本文件
      - name: 下载版本文件
        run: |
          curl -L https://github.com/NoUnityCN/service/releases/download/releases/LTS.json -o public/version/LTS.json
          curl -L https://github.com/NoUnityCN/service/releases/download/releases/TECH.json -o public/version/TECH.json
          curl -L https://github.com/NoUnityCN/service/releases/download/releases/BETA.json -o public/version/BETA.json
          curl -L https://github.com/NoUnityCN/service/releases/download/releases/ALPHA.json -o public/version/ALPHA.json

          echo "已下载的版本文件:"
          ls -la public/version/
          
          echo "LTS版本数量: $(grep -o "unityhub://" public/version/LTS.json | wc -l)"
          echo "TECH版本数量: $(grep -o "unityhub://" public/version/TECH.json | wc -l)"
          echo "BETA版本数量: $(grep -o "unityhub://" public/version/BETA.json | wc -l)"
          echo "ALPHA版本数量: $(grep -o "unityhub://" public/version/ALPHA.json | wc -l)"

      # 4. 配置Git
      - name: 配置Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # 5. 提交版本更新
      - name: 提交版本更新
        run: |
          if git diff --quiet public/version/; then
            echo "没有检测到版本更新，跳过提交"
            exit 0
          fi
          git add public/version/
          git commit -m "ci: 更新$(date +'%Y-%m-%d') Unity版本数据"

      # 6. 推送版本更新到main分支
      - name: 推送版本更新
        run: |
          git push origin HEAD:main

      # 7. 部署到Vercel
      - name: 部署到Vercel
        uses: amondnet/vercel-action@v20
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod' 
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_STATIC }}  # 使用生产环境项目ID
          vercel-git-remote: 'github'